name: Secret Scanning on PR
on: 
  #workflow will run whenever a pull request is opened, synchronized(new commit pushed),reopened,or edited  
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  build:
    runs-on: self-hosted
    env:
      github_event_before: ${{ github.event.before }}
      github_sha: ${{ github.sha }}
      github_base_ref: ${{ github.base_ref }}
      github_pull_request: ${{ github.event.pull_request.head.ref }}
      github_event: ${{ github.event_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v2

      - name: Create temporary directory
        run: echo "WORKFLOWDIR=$(mktemp -d)" >> $GITHUB_ENV

      - name: Create environmental variables 
        run: |
          echo "ARTIFACT_PATH=${WORKFLOWDIR}/current-results.json" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=FMGL-SS-${GITHUB_RUN_ID}-${GITHUB_SHA}" >> $GITHUB_ENV
          echo "ANALYSE_FILE=${WORKFLOWDIR}/analyse_current_results.txt" >> $GITHUB_ENV
          echo "SUM_FILE=${WORKFLOWDIR}/scan_summary.txt" >> $GITHUB_ENV
          echo "PREV_ARTIFACTS=${WORKFLOWDIR}/prev-artifacts.json" >> $GITHUB_ENV
          echo "GITLEAKS_ARTIFACTS=${WORKFLOWDIR}/secret-af.json" >> $GITHUB_ENV
          echo "LAST_ARTIFACT_ZIP=${WORKFLOWDIR}/last-scans-output.zip" >> $GITHUB_ENV
      
      - name: Check if gitleaks is installed
        run: |
          if ! command -v gitleaks &> /dev/null; then
            echo "gitleaks is not installed, installing..."
            curl -so gitleaks.tar.gz  $(curl -sL https://api.github.com/repos/zricethezav/gitleaks/releases/latest | grep "browser_download_url.*linux_x64.tar.gz" | cut -d '"' -f 4)
            tar -C /usr/local/bin -x -v -f gitleaks.tar.gz gitleaks
          else
            echo "gitleaks is already installed"
          fi

      - name: Run Gitleaks scan on the modified files in the Pull request event 
        run: |
          bash -s << 'EOF'
          if [ $github_event == "pull_request" ]; then
            # Fetch the changes made in the pull request
            git fetch origin $github_base_ref $github_pull_request --depth=1   
            gitleaks detect --source . --log-opts="--all $github_event_before..$github_sha" -r $ARTIFACT_PATH
            ls -alh $ARTIFACT_PATH
            echo "leaks=$(jq length $ARTIFACT_PATH)" >> $GITHUB_ENV
          EOF
        continue-on-error: true

      - name: If leaks found 
        if: ${{ env.leaks != 0 }}
        run: |
          # jq_filter='.[] | "- The \(.RuleID) rule has detected a plain-text \(.Match | split("=")[0] | split("\":")[0]) from \(.StartLine) line to in the \(.File) file."'
          jq_filter='.[] | "- The \(.RuleID) rule has detected a plain-text \(.Description) in line \(.StartLine) in the \(.File) file."'
          jq -r "$jq_filter" "$ARTIFACT_PATH" > $ANALYSE_FILE 
          echo $ANALYSE_FILE 
          leaks_uniq_line=$(uniq "$ANALYSE_FILE" | wc -l)
          echo "\nRecommendations:\n- Please review and remove the respective secrets from the source code.\n " >> $ANALYSE_FILE 
          echo "- Repository: ${{ github.repository }}\n- Scan Status: Completed\n- Completion Time: $(date)" >> $SUM_FILE
          echo "- Number of plain-text secrets found: $leaks_uniq_line " >> $SUM_FILE
          echo $SUM_FILE
        continue-on-error: true
    

      - name: Clean up
        run: |
          rm -rf $WORKFLOWDIR


          


      


