name: SAST Scanning
on: 
  #run the weekly scan on midnight Saturday
  #schedule: 
  #    - cron:  '0 0 * * 6' 
  #run when changes happens to main/master branch
  push:
    branches:
      - main
      - master 

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v2

      - name: Create temporary directory
        run: echo "WORKFLOWDIR=$(mktemp -d)" >> $GITHUB_ENV

      - name: Create environmental variables 
        run: |
          echo "CODE_SCANNING_FILE=${WORKFLOWDIR}/github_scan_result.json" >> $GITHUB_ENV
          echo "ARTIFACT_PATH=${WORKFLOWDIR}/semgrep_scan_result.json" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=SAST-${GITHUB_RUN_ID}-${GITHUB_SHA}" >> $GITHUB_ENV

          echo "ANALYSE_FILE=${WORKFLOWDIR}/analyse_current_results.txt" >> $GITHUB_ENV
          echo "SUM_FILE=${WORKFLOWDIR}/scan_summary.txt" >> $GITHUB_ENV
    
      - name: check if semgrep installed
        run: |
         if ! command -v semgrep &> /dev/null; then
           echo "semgrep is not installed, installing..."
           python3 -m pip install semgrep  
         else
           echo "semgrep is already installed"
         fi
        continue-on-error: true

      - name: Run full scan with Semgrep 
        run: |
          semgrep scan --json --output $ARTIFACT_PATH --config="p/default"
          ls -alh $ARTIFACT_PATH
        continue-on-error: true
      
      - name: Processing SAST result
        run : |
          jq_filter='.results[] | select(.extra.metadata.impact | IN(${{ vars.ISSUE_SEVERITY }})) |  "- RuleID \(.extra.metadata."semgrep.dev".rule.rule_id) has detected a potential \(.extra.metadata.impact) impact \(.extra.metadata.vulnerability_class[0]) vulnerability in the \(.path) file (start from line \(.start.line)). "'

          jq -r "$jq_filter" "$ARTIFACT_PATH" > $ANALYSE_FILE 
          cat $ANALYSE_FILE 
          
          echo "- Repository: ${{ github.repository }}\n- Scan Status: Completed\n- Completion Time: $(date)" >> $SUM_FILE
          echo "- Number of files being scanned: $(jq '.paths.scanned | length' $ARTIFACT_PATH)  " >> $SUM_FILE
          echo "- Number of vulnerabilities detected in this scan: $(jq '.results| length' $ARTIFACT_PATH)  " >> $SUM_FILE
        continue-on-error: true
    
      - name: Get GitHub Code Scanning alert if enabled (GitHub Enterprise with GHAS license only)
        run: |
          # query the endpoint for repository level
          curl -L -o $CODE_SCANNING_FILE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "X-Accepted-GitHub-Permissions: pull_requests=read,contents=read; issues=read,contents=read" \
          https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts
        continue-on-error: true

      - name: Upload Artifact
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 #v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            ${{ env.CODE_SCANNING_FILE }}
            ${{ env.ARTIFACT_PATH }}
      
      - name: Email the result 
        run: | 
          bash -s << 'EOF'

          EMAIL_BODY="Hello,\n\nThis email is to inform about the results of the recent SAST scan.
          \nScan Summary:\n$(cat $SUM_FILE)
          \nSAST Scan Result Details:\n$(cat $ANALYSE_FILE)\n
          Recommendations:\n- Please review the vulnerable code and make the appropiate change.\n
          If you have any questions or need further assistance, please don't hesitate to reach out.
          Thank you!"
          
          EMAIL_BODY=$(printf "$EMAIL_BODY")

          for text in "${{ vars.EMAILS }}"; do
            if [[ "$text" != *@fortescue.com* ]]; then
              echo "Please add list of recipient email in GitHub."
            else
              echo "${{ vars.EMAILS }}" | while IFS= read -r line; do
              aws ses send-email \
              --from 'application.security@fortescue.com' \
              --destination "ToAddresses=['$line']" \
              --message "Subject={Data='Static Analysis Security Testing Scanning Results'},Body={Text={Data=\"$EMAIL_BODY\"}}" --profile 871866954555.developer-871866954555  
              done
            fi
          done 
          EOF
        continue-on-error: true 
    
      
      - name: Clean up
        run: |
          rm -rf $WORKFLOWDIR
          

      
