name: Secret Scanning on PR
on: 
  #workflow will run whenever a pull request is opened, synchronized(new commit pushed),reopened,or edited  
  pull_request:
    types: [synchronize, reopened, edited]

jobs:
  build:
    runs-on: self-hosted
    env:
      github_event_before: ${{ github.event.before }}
      github_event_after: ${{ github.event.after }}
      github_sha: ${{ github.sha }}
      github_base_ref: ${{ github.base_ref }}
      github_pull_request_branch: ${{ github.event.pull_request.head.ref }}
      github_pull_request_number: ${{ github.event.pull_request.number }}
      github_event: ${{ github.event_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v2

      - name: Create temporary directory
        run: echo "WORKFLOWDIR=$(mktemp -d)" >> $GITHUB_ENV

      - name: Create environmental variables 
        run: |
          echo "ARTIFACT_PATH=${WORKFLOWDIR}/current-results.json" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=FMGL-SS-${GITHUB_RUN_ID}-${GITHUB_SHA}" >> $GITHUB_ENV
          echo "ANALYSE_FILE=${WORKFLOWDIR}/analyse_current_results.txt" >> $GITHUB_ENV
          echo "SUM_FILE=${WORKFLOWDIR}/scan_summary.txt" >> $GITHUB_ENV

      - name: Check if gitleaks is installed
        run: |
          if ! command -v gitleaks &> /dev/null; then
            echo "gitleaks is not installed, installing..."
            curl -sL $(curl -sL https://api.github.com/repos/zricethezav/gitleaks/releases/latest | grep "browser_download_url.*linux_x64.tar.gz" | cut -d '"' -f 4) -o gitleaks.tar.gz
            tar -C /usr/local/bin -x -v -f gitleaks.tar.gz gitleaks
          else
            echo "gitleaks is already installed"
          fi

      - name: Run Gitleaks scan on the modified files in the Pull request event 
        run: |
          bash -s << 'EOF'
          if [ $github_event == "pull_request" ]; then
            # Fetch the changes made in the pull request
            git fetch origin pull/$github_pull_request_number/head:$github_pull_request_branch --depth=1   
            gitleaks detect --source . --log-opts="$github_event_before..$github_event_after" -r $ARTIFACT_PATH
            echo "leaks=$(jq length $ARTIFACT_PATH)" >> $GITHUB_ENV
          fi
          EOF
        continue-on-error: true

      - name: If leaks found
        if: ${{ env.leaks != 0 }}
        run: |
          # jq_filter='.[] | "- The \(.RuleID) rule has detected a plain-text \(.Match | split("=")[0] | split("\":")[0]) from \(.StartLine) line to in the \(.File) file."'
          jq_filter='.[] | "- The \(.RuleID) rule has detected a plain-text \(.Description) in line \(.StartLine) in the \(.File) file."'
          jq -r "$jq_filter" "$ARTIFACT_PATH" > $ANALYSE_FILE 
        continue-on-error: true
    
      - name: Upload Artifact
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 #v2
        with:
          name: ${{ env.ARTIFACT_NAME}}
          path: ${{ env.ARTIFACT_PATH}}   

      - name: sending data to Defect Dojo
        uses: ivanamat/defectdojo-import-scan@a5865a5c30dabc66736603bbded081941b9c07ea #v1
        env: 
          defect_dojo_url : ${{ env.DEFECT_DOJO_URL }}
          defect_dojo_token: ${{ secrets.DEFECT_DOJO_API_TOKEN }}
        with:
          token: $defect_dojo_token
          defectdojo_url: $defect_dojo_url
          file: ${{ env.ARTIFACT_PATH}} 
          scan_type: Gitleaks scan
          engagement: 6

      - name: Clean up
        run: |
          rm -rf $WORKFLOWDIR
          exit 1
    

      


