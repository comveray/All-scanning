name: SAST Scanning on PR
on: 
  #run the weekly scan on midnight Saturday
  #schedule: 
  #    - cron:  '0 0 * * 6' 
  #run when changes happens to main/master branch
  # push:
    #branches:
    #  - main
     # - master 
  # runs when a pull_request event's activity type is opened, edited or reopened
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v2

      - name: Create temporary directory
        run: echo "WORKFLOWDIR=$(mktemp -d)" >> $GITHUB_ENV

      - name: Create environmental variables 
        run: |
          echo "CODE_SCANNING_FILE=${WORKFLOWDIR}/github_scan_result.json" >> $GITHUB_ENV
          echo "ARTIFACT_PATH=${WORKFLOWDIR}/semgrep_scan_result.json" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=SAST-${GITHUB_RUN_ID}-${GITHUB_SHA}" >> $GITHUB_ENV

          echo "ANALYSE_FILE=${WORKFLOWDIR}/analyse_current_results.txt" >> $GITHUB_ENV
          echo "SUM_FILE=${WORKFLOWDIR}/scan_summary.txt" >> $GITHUB_ENV

          echo "PREV_ARTIFACTS=${WORKFLOWDIR}/prev-artifacts.json" >> $GITHUB_ENV
          echo "GITLEAKS_ARTIFACTS=${WORKFLOWDIR}/secret-af.json" >> $GITHUB_ENV
          echo "LAST_ARTIFACT_ZIP=${WORKFLOWDIR}/last-scans-output.zip" >> $GITHUB_ENV
      
      - name: check if semgrep installed
        run: |
         if ! command -v semgrep &> /dev/null; then
           echo "semgrep is not installed, installing..."
           python3 -m pip install semgrep  
         else
           echo "semgrep is already installed"
         fi
        continue-on-error: true

      - name: Run full scan with Semgrep 
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Fetch the changes made in the pull request
            git fetch origin ${{ github.event.before }}:${{ github.event.after }} --depth=1     
            echo "github event before: ${{ github.event.before }}"
            echo "github event after:${{ github.event.after }}"

            # Use git diff to get the list of changed files
            git config advice.objectNameWarning false
            edited_files=$(git diff-tree --name-only ${{ github.event.before }} ${{ github.event.after }})
            echo $edited_files

            # Run semgrep only if there are edited files
            if [ -n "$edited_files" ]; then
              # Create an array of --include options for each edited file
              include_options=()
              for file in $edited_files; do
                include_options+=("--include $file")
              done
              # Run semgrep with the created include options
              semgrep  "${include_options[@]}" --config="p/default" --json --output $ARTIFACT_PATH
            else
              echo "No files edited in the latest commit. Semgrep scan skipped."
            fi
          else
            echo "Semgrep scan is skipped for non-push events."
          fi
        continue-on-error: true
      
      - name: Processing SAST result (Please set the reporting severity level in GitHub Action Variables settings)
        run : |
          if [ -n "${{ vars.ISSUE_SEVERITY  }}" ]; then
            empty_issue_list=$(jq '.results[] | select(.extra.metadata.impact | IN(${{ vars.ISSUE_SEVERITY }})) ' $ARTIFACT_PATH | wc -l)
            echo "empty_issue_list=$empty_issue_list" >> $GITHUB_ENV
            if [ $empty_issue_list != 0 ]; then
              echo "There are vulnerabilities with severity levels: "${{ vars.ISSUE_SEVERITY  }}"." 
              jq_filter='.results[] | select(.extra.metadata.impact | IN(${{ vars.ISSUE_SEVERITY }})) |  "- RuleID \(.extra.metadata."semgrep.dev".rule.rule_id) has detected a potential \(.extra.metadata.impact) impact \(.extra.metadata.vulnerability_class[0]) vulnerability in the \(.path) file (start from line \(.start.line)). "'
              jq -r "$jq_filter" "$ARTIFACT_PATH" > $ANALYSE_FILE 
              cat $ANALYSE_FILE    
            else 
              echo "There are no issues with severity levels - "${{ vars.ISSUE_SEVERITY  }}", found in this scan. "
            fi 
          else
            echo "Please customise the severity filtering variable for SAST scan result to the desired level. As of now, the scan results will be filtered to only show CRTICAL or HIGH severity impact only. "
            empty_issue_list=$(jq '.results[] | select(.extra.metadata.impact | IN("HIGH", "CRITICAL"))' $ARTIFACT_PATH | wc -l)
            echo "empty_issue_list=$empty_issue_list" >> $GITHUB_ENV
            if [ $empty_issue_list != 0 ]; then
              echo "There are There are vulnerabilities with severity levels 'HIGH' or 'CRITICAL'."
              jq_filter='.results[] | select(.extra.metadata.impact | IN("HIGH", "CRITICAL")) |  "- RuleID \(.extra.metadata."semgrep.dev".rule.rule_id) has detected a potential \(.extra.metadata.impact) impact \(.extra.metadata.vulnerability_class[0]) vulnerability in the \(.path) file (start from line \(.start.line)). "'
              jq -r "$jq_filter" "$ARTIFACT_PATH" > $ANALYSE_FILE  
              cat $ANALYSE_FILE 
            else 
              echo "There are no issues with severity levels 'HIGH' or 'CRITICAL' found in this scan. "
            fi
          fi
          echo "- Repository: ${{ github.repository }}\n- Scan Status: Completed\n- Completion Time: $(date)" >> $SUM_FILE
          echo "- Number of files being scanned: $(jq '.paths.scanned | length' $ARTIFACT_PATH)  " >> $SUM_FILE
          echo "- Number of vulnerabilities detected in this scan: $(jq '.results| length' $ARTIFACT_PATH)  " >> $SUM_FILE
        continue-on-error: true

      - name: Clean up
        run: |
          rm -rf $WORKFLOWDIR
          

      
